
from PIL import Image
import numpy as np     # numpy
from collections import namedtuple

_RepeatBase = namedtuple('repeat', ['count','contents'])

class Repeat(_RepeatBase):
	""" 
	Repeat class which implies self.contents are to repeated self.count time 
	self.count is integer
	self.contents is object of Pixel class data type	
	"""
	def generate(self):
		""" 
		generate function of repeat class which repeats 
		the list generated by self.contents.gen() by 
		self.count() times
		"""
		return self.count*self.contents.gen()


class Pixel (object):
	"""
	Pixel class which defines a Pixel object, and 
	defines methods to generate lists from the 
	particular Pixel object. 
	Pixel object can be a uint8, object of Repeat 
	class, or list of objects of Repeat class 

	"""
	def __init__(self,pixel_val):
		self.pixel_val = pixel_val

	def gen(self) :
		""" 
		This takes a Pixel Object, and returns the correspondnig individual 
		pixels in a list of uint8
		
		>>> BLACK = Pixel(1)
		>>> WHITE = Pixel(255)
		>>> Pixel([Repeat(2,BLACK)]).gen()
		[1, 1]

		Horizoantal Wipe
		>>> Pixel ( [ Repeat(4, Pixel([Repeat(1,BLACK),Repeat(2,WHITE)])) ]).gen()
		[1, 255, 255, 1, 255, 255, 1, 255, 255, 1, 255, 255]

		Vertical Wipe
		>>> Pixel ( [ Repeat(2, Pixel([Repeat(3, BLACK)])) , Repeat(2, Pixel([Repeat(3, WHITE)])) ]  ).gen()
		[1, 1, 1, 1, 1, 1, 255, 255, 255, 255, 255, 255]
		"""
		mylist = []
		if type(self.pixel_val) == int :
			mylist.append(self.pixel_val)
		elif type(self.pixel_val) == list :
			for i in self.pixel_val:
				mylist = mylist + i.generate()
		else :
			mylist.append(self.pixel_val.generate())	
		return mylist

#r1 = Pixel ( [ Repeat(10, Pixel([Repeat(1,BLACK),Repeat(3,WHITE)])) ]   )
#r2 = Pixel ( [ Repeat(5, Pixel([Repeat(4, BLACK)])) , Repeat(5, Pixel([Repeat(4, WHITE)])) ]  )

#print(r1.gen())
#print(r2.gen())

#print(np.reshape (np.array(r1.gen()), (-1 , 4)  ) )
#print(np.reshape (np.array(r2.gen()), (-1 , 4)  ) )


if __name__ == "__main__":
    import doctest
    doctest.testmod()